 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  var timeStampDate = decodeURI(req.url.replace('/', ''));
  
  if(!isNaN(timeStampDate)){ // if it is a number
    var date = new Date(timeStampDate * 1000);
    res.json({ "unix":parseInt(timeStampDate), "natural":getNaturalDate(date)})
  } else {
    var date = new Date(timeStampDate);
    if(!isNaN(date.getTime())){ // if date can be converted to unix timestamp number
      res.json({ "unix" : parseInt(date.getTime() / 1000), "natural" : getNaturalDate(date)});
    } else { // if converted date is not a number
      res.json({ "unix" : null, "natural" : null});
    }
  }
  
});

function getNaturalDate(date){
  var months = ["January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"
  ];
  return months[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();
}

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

